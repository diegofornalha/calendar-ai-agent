"""
Configura√ß√µes do Firebase Admin SDK para a aplica√ß√£o Calend√°rio IA.
Este arquivo cont√©m as credenciais padr√£o e fun√ß√µes para gerenciar o Firebase Admin SDK.
"""

import os
import json
import streamlit as st
import tempfile
import firebase_admin
from firebase_admin import credentials
from firebase_admin import auth as firebase_auth

# Credenciais padr√£o do Firebase Admin SDK
DEFAULT_FIREBASE_ADMIN_CONFIG = {
  "type": "service_account",
  "project_id": "calendario-ia-coflow",
  "private_key_id": "INSIRA_SEU_PRIVATE_KEY_ID_AQUI",
  "private_key": "INSIRA_SUA_PRIVATE_KEY_AQUI",
  "client_email": "INSIRA_SEU_CLIENT_EMAIL_AQUI",
  "client_id": "INSIRA_SEU_CLIENT_ID_AQUI",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "INSIRA_SUA_CLIENT_X509_CERT_URL_AQUI",
  "universe_domain": "googleapis.com"
}

# Vari√°vel para controlar a inicializa√ß√£o do Firebase Admin SDK
_firebase_admin_initialized = False

def get_admin_credentials():
    """
    Obt√©m as credenciais do Firebase Admin SDK da sess√£o ou usa as padr√µes
    """
    if 'firebase_admin_config' in st.session_state:
        return st.session_state.firebase_admin_config
    return DEFAULT_FIREBASE_ADMIN_CONFIG

def initialize_firebase_admin():
    """
    Inicializa o Firebase Admin SDK com as credenciais configuradas
    """
    global _firebase_admin_initialized
    
    if _firebase_admin_initialized:
        return True
    
    try:
        # Obter as credenciais atuais
        config = get_admin_credentials()
        
        # Criar um arquivo tempor√°rio para as credenciais
        with tempfile.NamedTemporaryFile(suffix='.json', delete=False) as temp_file:
            temp_path = temp_file.name
            json.dump(config, temp_file)
        
        # Inicializar o Firebase Admin SDK
        try:
            # Tentar inicializar o app Firebase Admin
            cred = credentials.Certificate(temp_path)
            firebase_admin.initialize_app(cred)
        except ValueError:
            # Se j√° estiver inicializado, reiniciar com as novas credenciais
            firebase_admin.delete_app(firebase_admin.get_app())
            cred = credentials.Certificate(temp_path)
            firebase_admin.initialize_app(cred)
        
        # Limpar o arquivo tempor√°rio
        os.unlink(temp_path)
        
        # Marcar como inicializado
        _firebase_admin_initialized = True
        return True
        
    except Exception as e:
        st.error(f"Erro ao inicializar Firebase Admin SDK: {str(e)}")
        return False

def save_admin_credentials(config):
    """
    Salva novas credenciais do Firebase Admin SDK
    """
    # Validar o formato b√°sico das credenciais
    required_fields = ["type", "project_id", "private_key_id", "private_key", "client_email"]
    for field in required_fields:
        if field not in config:
            return False, f"Credenciais inv√°lidas: campo '{field}' ausente"
    
    # Salvar na sess√£o
    st.session_state.firebase_admin_config = config
    
    # Reinicializar o Firebase Admin SDK
    global _firebase_admin_initialized
    _firebase_admin_initialized = False
    
    return True, "Credenciais salvas com sucesso!"

def admin_config_component():
    """
    Componente Streamlit para configura√ß√£o do Firebase Admin SDK
    """
    st.write("### Configura√ß√£o do Firebase Admin SDK")
    
    # Mostrar as credenciais atuais
    current_config = get_admin_credentials()
    
    # Exibir informa√ß√µes sobre o projeto
    st.write(f"**Projeto atual:** `{current_config['project_id']}`")
    st.write(f"**Conta de servi√ßo:** `{current_config['client_email']}`")
    
    # Op√ß√µes de configura√ß√£o
    config_option = st.radio(
        "Como voc√™ deseja configurar o Firebase Admin SDK?",
        ["Usar credenciais padr√£o", "Carregar arquivo JSON", "Inserir JSON manualmente"],
        index=0,
        key="admin_sdk_config_option"
    )
    
    # Link para instru√ß√µes em vez de expander aninhado
    st.markdown("[Como obter credenciais do Firebase Admin SDK?](#firebase-admin-sdk-credentials)")
    
    # Mostrar informa√ß√µes sobre como obter credenciais
    if config_option == "Usar credenciais padr√£o":
        if st.button("Restaurar credenciais padr√£o"):
            if 'firebase_admin_config' in st.session_state:
                del st.session_state.firebase_admin_config
            
            # Reinicializar o Firebase Admin SDK
            global _firebase_admin_initialized
            _firebase_admin_initialized = False
            
            st.success("Credenciais padr√£o restauradas com sucesso!")
            st.rerun()
        
        # Instru√ß√µes para obter credenciais - movidas para fora para evitar erros de aninhamento
        st.markdown("üìò Veja a se√ß√£o de ajuda abaixo para saber como obter suas pr√≥prias credenciais.")

    elif config_option == "Carregar arquivo JSON":
        uploaded_file = st.file_uploader(
            "Carregar arquivo de credenciais do Firebase",
            type=["json"],
            help="Fa√ßa upload do arquivo JSON de credenciais da conta de servi√ßo do Firebase"
        )
        
        if uploaded_file is not None:
            try:
                # Ler e validar o arquivo JSON
                config = json.load(uploaded_file)
                
                if st.button("Salvar credenciais carregadas"):
                    success, message = save_admin_credentials(config)
                    if success:
                        st.success(message)
                        st.rerun()
            
            except Exception as e:
                st.error(f"Erro ao processar o arquivo: {str(e)}")

    elif config_option == "Inserir JSON manualmente":
        # Converter as credenciais atuais para JSON formatado
        default_json = json.dumps(current_config, indent=2)
        
        # Campo para inser√ß√£o manual de JSON
        json_input = st.text_area(
            "Cole o JSON de credenciais do Firebase",
            value=default_json,
            height=400,
            help="Cole o conte√∫do do arquivo JSON de credenciais da conta de servi√ßo do Firebase"
        )
        
        if st.button("Salvar credenciais inseridas"):
            try:
                # Validar e processar o JSON
                config = json.loads(json_input)
                success, message = save_admin_credentials(config)
                if success:
                    st.success(message)
                    st.rerun()
            
            except json.JSONDecodeError:
                st.error("JSON inv√°lido. Verifique o formato e tente novamente.")
            except Exception as e:
                st.error(f"Erro ao processar credenciais: {str(e)}")

    # Adicionar se√ß√£o sobre regras do Firestore
    st.write("### Regras de Seguran√ßa do Firestore")
    st.write("""
    As regras de seguran√ßa determinam quem pode ler e escrever nos seus dados do Firestore. 
    Por padr√£o, o Firebase bloqueia todos os acessos.
    """)

    # Exemplo de regras do Firestore
    with st.expander("Exemplo de regras do Firestore"):
        st.code("""rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }
  }
}""", language="javascript")
        
        st.markdown("""
        #### Explica√ß√£o:
        - `rules_version = '2'` - Vers√£o das regras do Firestore
        - `service cloud.firestore` - Indica que estas regras s√£o para o Firestore
        - `match /databases/{database}/documents` - Aplica as regras a todos os documentos
        - `match /{document=**}` - Aplica as regras a todos os documentos em todas as cole√ß√µes
        - `allow read, write: if false;` - Bloqueia todas as leituras e escritas
        
        ### Exemplos de Regras Personalizadas:
        
        **Permitir acesso apenas para usu√°rios autenticados:**
        ```javascript
        rules_version = '2';
        service cloud.firestore {
          match /databases/{database}/documents {
            match /{document=**} {
              allow read, write: if request.auth != null;
            }
          }
        }
        ```
        
        **Permitir que os usu√°rios leiam todos os dados, mas apenas escrevam seus pr√≥prios:**
        ```javascript
        rules_version = '2';
        service cloud.firestore {
          match /databases/{database}/documents {
            match /users/{userId} {
              allow read: if request.auth != null;
              allow write: if request.auth.uid == userId;
            }
          }
        }
        ```
        """)
        
        st.info("""
        ‚ö†Ô∏è **Importante**: Configure as regras de seguran√ßa apropriadas para o seu aplicativo!
        O exemplo padr√£o bloqueia todo o acesso. Voc√™ precisar√° configurar regras que permitam
        os acessos necess√°rios para seu aplicativo funcionar corretamente.
        """)
        
        # Link para documenta√ß√£o
        st.markdown("[Documenta√ß√£o oficial de regras de seguran√ßa do Firestore](https://firebase.google.com/docs/firestore/security/get-started)")

# Se√ß√£o de ajuda fora da fun√ß√£o para evitar problemas de aninhamento
def show_admin_sdk_help():
    """
    Exibe instru√ß√µes para obter credenciais do Firebase Admin SDK
    """
    st.markdown("<a name='firebase-admin-sdk-credentials'></a>", unsafe_allow_html=True)
    st.header("Como obter credenciais do Firebase Admin SDK")
    
    st.markdown("""
    ## Instru√ß√µes para obter credenciais do Firebase Admin SDK

    1. **Acesse o Console do Firebase**
       - V√° para [console.firebase.google.com](https://console.firebase.google.com/)
       - Selecione seu projeto existente ou crie um novo

    2. **Acesse as configura√ß√µes do projeto**
       - Clique no √≠cone ‚öôÔ∏è (Configura√ß√µes) no menu lateral
       - Selecione "Configura√ß√µes do projeto"

    3. **V√° para Contas de servi√ßo**
       - Clique na aba "Contas de servi√ßo"
       - Selecione "Firebase Admin SDK"

    4. **Gere uma nova chave privada**
       - Clique no bot√£o "Gerar nova chave privada"
       - Confirme no di√°logo que aparecer
       - O arquivo JSON ser√° baixado automaticamente

    5. **Use o arquivo baixado**
       - Carregue este arquivo JSON nesta p√°gina de configura√ß√£o
       - Ou copie e cole o conte√∫do do arquivo no campo de texto

    6. **Configura√ß√£o das regras de seguran√ßa**
       - N√£o se esque√ßa de configurar as regras de seguran√ßa no Firebase para permitir acesso aos seus dados
       - Acesse as se√ß√µes "Firestore", "Realtime Database" e "Storage" no console do Firebase para configurar as regras
    """)

def test_admin_connection():
    """
    Testa a conex√£o com o Firebase Admin SDK
    """
    if initialize_firebase_admin():
        try:
            # Tentar listar usu√°rios (limitado a 1) para verificar a conex√£o
            page = firebase_auth.list_users(max_results=1)
            
            # Retorna sucesso e uma mensagem com a informa√ß√£o do projeto
            config = get_admin_credentials()
            return True, f"Conex√£o bem-sucedida com o projeto '{config['project_id']}'"
        
        except Exception as e:
            return False, f"Erro ao conectar: {str(e)}"
    else:
        return False, "Erro ao inicializar o Firebase Admin SDK" 